version: '3.8'

services:
  eidolon:
    image: eidolon/eidolon:latest
    container_name: eidolon-prod
    restart: unless-stopped
    
    # Environment configuration
    environment:
      - EIDOLON_ENV=production
      - EIDOLON_CONFIG=/app/config/production-settings.yaml
      
    # Environment file with secrets
    env_file:
      - .env.prod
      
    # Volume mounts
    volumes:
      # Data persistence
      - eidolon_data:/app/data
      - eidolon_logs:/app/logs
      - eidolon_backup:/app/backup
      
      # Configuration
      - ./config:/app/config:ro
      - ./scripts:/app/scripts:ro
      
      # SSL certificates (if using HTTPS)
      - ./ssl:/app/ssl:ro
      
    # Port mappings
    ports:
      - "8080:8080"  # Monitoring dashboard
      - "8000:8000"  # API (if enabled)
      
    # Health check
    healthcheck:
      test: ["CMD", "python", "-m", "eidolon", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
      
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
          
    # Security
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      
    # User configuration
    user: "1000:1000"
    
    # Capabilities
    cap_drop:
      - ALL
    cap_add:
      - DAC_OVERRIDE  # For file access
      - SETUID        # For user switching
      - SETGID        # For group switching
      
    # Dependencies
    depends_on:
      - redis
      - postgres
      
  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: eidolon-redis
    restart: unless-stopped
    
    # Configuration
    command: >
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      
    # Volumes
    volumes:
      - redis_data:/data
      
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
      
    # Security
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
      
  # PostgreSQL for production database (optional upgrade from SQLite)
  postgres:
    image: postgres:15-alpine
    container_name: eidolon-postgres
    restart: unless-stopped
    
    # Environment
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      
    # Volumes
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
      
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      
    # Security
    security_opt:
      - no-new-privileges:true
      
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: eidolon-prometheus
    restart: unless-stopped
    
    # Command
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      
    # Volumes
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
      
    # Ports
    ports:
      - "9090:9090"
      
    # Dependencies
    depends_on:
      - eidolon
      
  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: eidolon-grafana
    restart: unless-stopped
    
    # Environment
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      
    # Volumes
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      
    # Ports
    ports:
      - "3000:3000"
      
    # Dependencies
    depends_on:
      - prometheus
      
  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: eidolon-nginx
    restart: unless-stopped
    
    # Volumes
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      
    # Ports
    ports:
      - "80:80"
      - "443:443"
      
    # Dependencies
    depends_on:
      - eidolon
      - grafana
      
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      
  # Log aggregation with Fluentd
  fluentd:
    image: fluent/fluentd:edge-debian
    container_name: eidolon-fluentd
    restart: unless-stopped
    
    # Volumes
    volumes:
      - ./logging/fluentd.conf:/fluentd/etc/fluent.conf:ro
      - eidolon_logs:/app/logs:ro
      - nginx_logs:/var/log/nginx:ro
      - fluentd_logs:/var/log/fluentd
      
    # Ports
    ports:
      - "24224:24224"
      - "24224:24224/udp"
      
    # Environment
    environment:
      - FLUENTD_CONF=fluent.conf
      
  # Backup service
  backup:
    image: eidolon/backup:latest
    container_name: eidolon-backup
    restart: unless-stopped
    
    # Volumes
    volumes:
      - eidolon_data:/backup/source/data:ro
      - eidolon_backup:/backup/destination
      - ./backup/scripts:/backup/scripts:ro
      
    # Environment
    environment:
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-"0 2 * * *"}  # Daily at 2 AM
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - BACKUP_ENCRYPTION_KEY=${BACKUP_ENCRYPTION_KEY}
      
    # Command
    command: ["/backup/scripts/backup-daemon.sh"]

# Named volumes for data persistence
volumes:
  eidolon_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${EIDOLON_DATA_DIR:-./data}
      
  eidolon_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${EIDOLON_LOGS_DIR:-./logs}
      
  eidolon_backup:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${EIDOLON_BACKUP_DIR:-./backup}
      
  redis_data:
    driver: local
    
  postgres_data:
    driver: local
    
  prometheus_data:
    driver: local
    
  grafana_data:
    driver: local
    
  nginx_logs:
    driver: local
    
  fluentd_logs:
    driver: local

# Networks
networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16